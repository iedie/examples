// database defines the interface and our database methods, allows us to create different implementations of it
// (such as SQL, or NoSQL, or even a volitile memory implementation for early proof of concept without having to
// install SQL or other dependencies)
package database

import (
	"errors"
	"time"
)

// For this demo API, we'll store 2 things: Sessions, and Users

// Session contains the information about an active session.
type Session struct {
	ID             int64     // This will be generated by the SaveSession method
	EncryptedCreds []byte    // Note that these are ENCRYPTED, NEVER store credentials in plain text, ever!
	Expires        time.Time // Ideally this would be refreshed with activity
	EndOfLife      time.Time // Maximum life of token, prevents a user being endlessly logged in
}

// User defines common data associated with a user account. This is fairly sparse for this demo API.
type User struct {
	ID                 int64  // This will be generated by the CreateUser method
	First, Last, Email string // Some basic data
	// Can always add more, and adjust Storer methods as needed
}

// Storer contains all the CRUD (Create, Read, Update, Delete) methods that any database implementation should have.
// Note that if you make any changes to either the interface or the interface types, those changes will also need to
// be made to your specific implementations.
type Storer interface {
	// Session methods
	// SaveSession stores a session in the database, filling in the ID that can be used to refetch it
	SaveSession(in *Session) error
	// LoadSession reads a session back out from the database
	LoadSession(id int64) (Session, error)
	// LogoutSession deletes the record of a given session
	LogoutSession(id int64) error
	// ExtendSession extends the expiration to be valid for the specified lifespan added to the current time
	ExtendSession(id int64, lifespan time.Duration) error
	// ClearExpiredSessions removes any records that are expired, returns any error and number of sessions cleared
	ClearExpiredSessions() (int, error)

	// User methods
	// CreateUser inserts a new User record into the database, the ID field will be generated as part of this process
	CreateUser(in *User) error
	// GetUserByID retrieves a User record by the ID field
	GetUserByID(id int64) (User, error)
	// GetUserByEmail retrieves a User record by the Email field
	GetUserByEmail(email string) (User, error)
	// You can add as many methods as needed, such as GetUserByFirstAndLast, etc
	// DeleteUser deletes a User record from the database
	DeleteUser(id int64) error
	// You can always add more methods, such as updating User information, or more CRUD methods for other interface types
}

// Standarized errors that may be returned
var ErrNotFound = errors.New(`session not found`)
